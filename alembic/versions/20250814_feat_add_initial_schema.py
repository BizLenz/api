"""feat_add_initial_schema

Revision ID: 55c6764cf05f
Revises: 
Create Date: 2025-08-14 23:20:59.799729

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '55c6764cf05f'
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('competitor_analysis',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='분석 데이터 고유 ID'),
    sa.Column('market_name', sa.String(length=255), nullable=False, comment='분석 대상 시장의 이름'),
    sa.Column('year', sa.Integer(), nullable=False, comment='데이터의 기준 연도'),
    sa.Column('competitor_name', sa.String(length=255), nullable=False, comment='경쟁사 이름'),
    sa.Column('revenue', sa.Numeric(precision=20, scale=2), nullable=True, comment='(B-1) 해당 경쟁사의 연간 매출액'),
    sa.Column('operating_profit', sa.Numeric(precision=20, scale=2), nullable=True, comment='(B-1) 해당 경쟁사의 연간 영업이익'),
    sa.Column('debt_ratio', sa.Numeric(precision=10, scale=2), nullable=True, comment='(B-1) 해당 경쟁사의 부채 비율 (%)'),
    sa.Column('share_percentage', sa.Numeric(precision=5, scale=2), nullable=True, comment='(B-2) 해당 시장에서의 점유율 (%)'),
    sa.Column('competitive_advantage', sa.Text(), nullable=True, comment='(B-4) 경쟁 우위 요소 (특허, 브랜드, 유통망 등)'),
    sa.Column('source', sa.String(length=255), nullable=True, comment='데이터의 출처'),
    sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='이 행(row)이 마지막으로 업데이트된 시간'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_competitor_analysis_competitor', 'competitor_analysis', ['competitor_name'], unique=False)
    op.create_index('idx_competitor_analysis_last_updated', 'competitor_analysis', ['last_updated'], unique=False)
    op.create_index('idx_competitor_analysis_market_year', 'competitor_analysis', ['market_name', 'year'], unique=False)
    op.create_index('idx_competitor_analysis_revenue_desc', 'competitor_analysis', ['revenue'], unique=False)
    op.create_index('idx_competitor_analysis_share_desc', 'competitor_analysis', ['share_percentage'], unique=False)
    op.create_table('market_analysis',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='분석 데이터 고유 ID'),
    sa.Column('market_name', sa.String(length=255), nullable=False, comment='분석 대상 시장의 이름'),
    sa.Column('year', sa.Integer(), nullable=False, comment='데이터의 기준 연도'),
    sa.Column('total_revenue', sa.Numeric(precision=20, scale=2), nullable=True, comment='(A) 해당 연도 전체 시장 매출액'),
    sa.Column('cagr', sa.Numeric(precision=5, scale=2), nullable=True, comment='(A) 연평균 성장률 (%)'),
    sa.Column('growth_drivers', sa.Text(), nullable=True, comment='(A) 시장 성장 동인 (기술 트렌드, 규제 변화 등)'),
    sa.Column('customer_group', sa.String(length=100), nullable=True, comment='(C) 주요 고객군 (연령, 산업, 지역 등)'),
    sa.Column('avg_purchase_value', sa.Numeric(precision=15, scale=2), nullable=True, comment='(C) 평균 구매 금액'),
    sa.Column('nps', sa.Numeric(precision=5, scale=2), nullable=True, comment='(C) 순추천지수 (Net Promoter Score)'),
    sa.Column('retention_rate', sa.Numeric(precision=5, scale=2), nullable=True, comment='(C) 고객 유지율 (%)'),
    sa.Column('source', sa.String(length=255), nullable=True, comment='데이터의 출처 (보고서, 기사 등)'),
    sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='이 행(row)이 마지막으로 업데이트된 시간'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_market_analysis_last_updated', 'market_analysis', ['last_updated'], unique=False)
    op.create_index('idx_market_analysis_market_year', 'market_analysis', ['market_name', 'year'], unique=False)
    op.create_index('idx_market_analysis_revenue_desc', 'market_analysis', ['total_revenue'], unique=False)
    op.create_index('idx_market_analysis_year_desc', 'market_analysis', ['year'], unique=False)
    op.create_table('product_analysis',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='분석 데이터 고유 ID'),
    sa.Column('competitor_name', sa.String(length=255), nullable=False, comment='이 제품을 소유한 경쟁사 이름'),
    sa.Column('product_name', sa.String(length=255), nullable=False, comment='제품 또는 서비스의 이름'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='제품 카테고리'),
    sa.Column('price', sa.Numeric(precision=15, scale=2), nullable=True, comment='(D) 대표 가격 정보'),
    sa.Column('price_policy_notes', sa.Text(), nullable=True, comment='(D) 가격 정책에 대한 상세 설명'),
    sa.Column('distribution_channels', sa.Text(), nullable=True, comment='(D) 주요 유통 채널 목록 (콤마로 구분된 텍스트 등)'),
    sa.Column('tech_level', sa.String(length=100), nullable=True, comment='(B-3) 제품의 기술적 수준'),
    sa.Column('features', sa.Text(), nullable=True, comment='(B-3) 제품의 주요 특징 요약'),
    sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='이 행(row)이 마지막으로 업데이트된 시간'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_product_analysis_category', 'product_analysis', ['category'], unique=False)
    op.create_index('idx_product_analysis_competitor', 'product_analysis', ['competitor_name'], unique=False)
    op.create_index('idx_product_analysis_last_updated', 'product_analysis', ['last_updated'], unique=False)
    op.create_index('idx_product_analysis_price_desc', 'product_analysis', ['price'], unique=False)
    op.create_index('idx_product_analysis_product', 'product_analysis', ['product_name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='서비스 내부에서 사용하는 고유 ID'),
    sa.Column('cognito_sub', sa.String(length=255), nullable=False, comment='Cognito 사용자 고유 식별자'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='서비스 DB에 프로필 생성 일시'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='프로필 수정 일시'),
    sa.Column('total_token_usage', sa.Integer(), server_default='0', nullable=True, comment='누적 토큰 사용량'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cognito_sub')
    )
    op.create_index('idx_users_cognito_sub', 'users', ['cognito_sub'], unique=False)
    op.create_index('idx_users_created_at', 'users', ['created_at'], unique=False)
    op.create_index('idx_users_token_usage', 'users', ['total_token_usage'], unique=False)
    op.create_table('business_plans',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='사업계획서 고유 ID'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='업로더 사용자'),
    sa.Column('file_name', sa.String(length=255), nullable=False, comment='원본 파일명'),
    sa.Column('file_path', sa.String(length=500), nullable=False, comment='스토리지 내 저장 경로'),
    sa.Column('file_size', sa.BigInteger(), nullable=True, comment='바이트 단위 파일 크기'),
    sa.Column('mime_type', sa.String(length=100), nullable=True, comment='파일 MIME 타입'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='업로드 시각'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='수정 시각'),
    sa.Column('latest_job_id', sa.Integer(), nullable=True, comment='가장 최근 분석 작업 ID (상태 조회용)'),
    sa.Column('status', sa.String(length=20), server_default='pending', nullable=True, comment='분석 상태 (pending, processing, completed, failed)'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_business_plans_created_at', 'business_plans', ['created_at'], unique=False)
    op.create_index('idx_business_plans_latest_job', 'business_plans', ['latest_job_id'], unique=False)
    op.create_index('idx_business_plans_status', 'business_plans', ['status'], unique=False)
    op.create_index('idx_business_plans_user_id', 'business_plans', ['user_id'], unique=False)
    op.create_index('idx_business_plans_user_status', 'business_plans', ['user_id', 'status'], unique=False)
    op.create_table('analysis_jobs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='분석 작업 고유 ID'),
    sa.Column('plan_id', sa.Integer(), nullable=False, comment='분석 대상 사업계획서'),
    sa.Column('job_type', sa.String(length=50), nullable=False, comment='분석 유형 (basic, market 등)'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='작업 상태 (pending, running, completed, failed)'),
    sa.Column('token_usage', sa.Integer(), nullable=True, comment='이 작업에서 사용된 토큰 양'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='작업 생성(요청) 시각'),
    sa.Column('gemini_request_id', sa.String(length=100), nullable=True, comment='Gemini API 요청 ID'),
    sa.Column('processing_time_seconds', sa.Integer(), nullable=True, comment='처리 시간 (초)'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='오류 메시지'),
    sa.Column('retry_count', sa.Integer(), server_default='0', nullable=True, comment='재시도 횟수'),
    sa.Column('completed_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='완료 시간'),
    sa.Column('s3_bucket', sa.String(length=255), nullable=True, comment='S3 버킷명'),
    sa.Column('s3_key', sa.String(length=500), nullable=True, comment='S3 객체 키 (파일 경로)'),
    sa.Column('s3_region', sa.String(length=50), server_default='ap-northeast-2', nullable=True, comment='S3 리전'),
    sa.Column('file_checksum', sa.String(length=64), nullable=True, comment='파일 체크섬 (SHA256)'),
    sa.Column('content_type', sa.String(length=100), nullable=True, comment='파일 MIME 타입'),
    sa.Column('upload_status', sa.Enum('pending', 'uploading', 'completed', 'failed', name='upload_status_enum'), server_default='pending', nullable=True, comment='S3 업로드 상태'),
    sa.Column('upload_started_at', sa.DateTime(timezone=True), nullable=True, comment='업로드 시작 시간'),
    sa.Column('upload_completed_at', sa.DateTime(timezone=True), nullable=True, comment='업로드 완료 시간'),
    sa.Column('presigned_url_expires_at', sa.DateTime(timezone=True), nullable=True, comment='프리사인드 URL 만료 시간'),
    sa.Column('download_count', sa.Integer(), server_default='0', nullable=True, comment='다운로드 횟수'),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True, comment='마지막 접근 시간'),
    sa.Column('backup_s3_key', sa.String(length=500), nullable=True, comment='백업 S3 키'),
    sa.Column('version_id', sa.String(length=100), nullable=True, comment='S3 객체 버전 ID'),
    sa.Column('is_archived', sa.Boolean(), server_default='false', nullable=True, comment='아카이브 여부'),
    sa.Column('archive_date', sa.DateTime(timezone=True), nullable=True, comment='아카이브 날짜'),
    sa.Column('raw_analysis_s3_path', sa.String(length=500), nullable=True, comment='원본 분석 결과 S3 경로'),
    sa.Column('raw_file_content_s3_path', sa.String(length=500), nullable=True, comment='원본 파일 S3 경로'),
    sa.ForeignKeyConstraint(['plan_id'], ['business_plans.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_analysis_jobs_archived', 'analysis_jobs', ['is_archived', 'archive_date'], unique=False)
    op.create_index('idx_analysis_jobs_completed_at', 'analysis_jobs', ['completed_at'], unique=False)
    op.create_index('idx_analysis_jobs_created_at', 'analysis_jobs', ['created_at'], unique=False)
    op.create_index('idx_analysis_jobs_gemini_request', 'analysis_jobs', ['gemini_request_id'], unique=False)
    op.create_index('idx_analysis_jobs_plan_id', 'analysis_jobs', ['plan_id'], unique=False)
    op.create_index('idx_analysis_jobs_plan_status', 'analysis_jobs', ['plan_id', 'status'], unique=False)
    op.create_index('idx_analysis_jobs_s3_bucket_key', 'analysis_jobs', ['s3_bucket', 's3_key'], unique=False)
    op.create_index('idx_analysis_jobs_status', 'analysis_jobs', ['status'], unique=False)
    op.create_index('idx_analysis_jobs_upload_status', 'analysis_jobs', ['upload_status'], unique=False)
    op.create_table('analysis_results',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='결과 항목 고유 ID'),
    sa.Column('analysis_job_id', sa.Integer(), nullable=False, comment='이 결과를 생성한 분석 작업'),
    sa.Column('evaluation_type', sa.String(length=50), nullable=False, comment='평가 유형 (overall, market 등)'),
    sa.Column('score', sa.Numeric(precision=5, scale=2), nullable=True, comment='점수 (0.00–100.00)'),
    sa.Column('summary', sa.Text(), nullable=True, comment='요약'),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='분석 유형별 특화 데이터 저장소'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='생성 일시'),
    sa.Column('evaluation_criteria', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='평가 기준 정보'),
    sa.Column('metrics', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='평가 지표 및 세부 점수'),
    sa.Column('benchmark_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='벤치마크 데이터'),
    sa.Column('weight', sa.Numeric(precision=5, scale=4), server_default='1.0000', nullable=True, comment='평가 가중치 (0.0000-1.0000)'),
    sa.Column('importance_level', sa.String(length=20), server_default='medium', nullable=True, comment='중요도 (critical, high, medium, low)'),
    sa.Column('confidence_score', sa.Numeric(precision=5, scale=2), nullable=True, comment='평가 신뢰도 (0.00-100.00)'),
    sa.Column('version', sa.Integer(), server_default='1', nullable=True, comment='평가 버전'),
    sa.ForeignKeyConstraint(['analysis_job_id'], ['analysis_jobs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_analysis_results_confidence', 'analysis_results', ['confidence_score'], unique=False)
    op.create_index('idx_analysis_results_created_at', 'analysis_results', ['created_at'], unique=False)
    op.create_index('idx_analysis_results_importance', 'analysis_results', ['importance_level'], unique=False)
    op.create_index('idx_analysis_results_job_id', 'analysis_results', ['analysis_job_id'], unique=False)
    op.create_index('idx_analysis_results_job_type', 'analysis_results', ['analysis_job_id', 'evaluation_type'], unique=False)
    op.create_index('idx_analysis_results_score', 'analysis_results', ['score'], unique=False)
    op.create_index('idx_analysis_results_type', 'analysis_results', ['evaluation_type'], unique=False)
    op.create_index('idx_analysis_results_version', 'analysis_results', ['version'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_analysis_results_version', table_name='analysis_results')
    op.drop_index('idx_analysis_results_type', table_name='analysis_results')
    op.drop_index('idx_analysis_results_score', table_name='analysis_results')
    op.drop_index('idx_analysis_results_job_type', table_name='analysis_results')
    op.drop_index('idx_analysis_results_job_id', table_name='analysis_results')
    op.drop_index('idx_analysis_results_importance', table_name='analysis_results')
    op.drop_index('idx_analysis_results_created_at', table_name='analysis_results')
    op.drop_index('idx_analysis_results_confidence', table_name='analysis_results')
    op.drop_table('analysis_results')
    op.drop_index('idx_analysis_jobs_upload_status', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_status', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_s3_bucket_key', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_plan_status', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_plan_id', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_gemini_request', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_created_at', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_completed_at', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_archived', table_name='analysis_jobs')
    op.drop_table('analysis_jobs')
    op.drop_index('idx_business_plans_user_status', table_name='business_plans')
    op.drop_index('idx_business_plans_user_id', table_name='business_plans')
    op.drop_index('idx_business_plans_status', table_name='business_plans')
    op.drop_index('idx_business_plans_latest_job', table_name='business_plans')
    op.drop_index('idx_business_plans_created_at', table_name='business_plans')
    op.drop_table('business_plans')
    op.drop_index('idx_users_token_usage', table_name='users')
    op.drop_index('idx_users_created_at', table_name='users')
    op.drop_index('idx_users_cognito_sub', table_name='users')
    op.drop_table('users')
    op.drop_index('idx_product_analysis_product', table_name='product_analysis')
    op.drop_index('idx_product_analysis_price_desc', table_name='product_analysis')
    op.drop_index('idx_product_analysis_last_updated', table_name='product_analysis')
    op.drop_index('idx_product_analysis_competitor', table_name='product_analysis')
    op.drop_index('idx_product_analysis_category', table_name='product_analysis')
    op.drop_table('product_analysis')
    op.drop_index('idx_market_analysis_year_desc', table_name='market_analysis')
    op.drop_index('idx_market_analysis_revenue_desc', table_name='market_analysis')
    op.drop_index('idx_market_analysis_market_year', table_name='market_analysis')
    op.drop_index('idx_market_analysis_last_updated', table_name='market_analysis')
    op.drop_table('market_analysis')
    op.drop_index('idx_competitor_analysis_share_desc', table_name='competitor_analysis')
    op.drop_index('idx_competitor_analysis_revenue_desc', table_name='competitor_analysis')
    op.drop_index('idx_competitor_analysis_market_year', table_name='competitor_analysis')
    op.drop_index('idx_competitor_analysis_last_updated', table_name='competitor_analysis')
    op.drop_index('idx_competitor_analysis_competitor', table_name='competitor_analysis')
    op.drop_table('competitor_analysis')
    # ### end Alembic commands ###