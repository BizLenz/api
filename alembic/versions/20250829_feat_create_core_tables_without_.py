"""feat: create core tables without circular references

Revision ID: 1288367832cd
Revises: 
Create Date: 2025-08-29 13:34:19.399911

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1288367832cd'
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('competitor_analysis',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='분석 데이터 고유 ID'),
    sa.Column('market_name', sa.String(length=255), nullable=False, comment='분석 대상 시장의 이름'),
    sa.Column('year', sa.Integer(), nullable=False, comment='데이터의 기준 연도'),
    sa.Column('competitor_name', sa.String(length=255), nullable=False, comment='경쟁사 이름'),
    sa.Column('revenue', sa.Numeric(precision=20, scale=2), nullable=True, comment='경쟁사 연간 매출액'),
    sa.Column('operating_profit', sa.Numeric(precision=20, scale=2), nullable=True, comment='경쟁사 연간 영업이익'),
    sa.Column('debt_ratio', sa.Numeric(precision=10, scale=2), nullable=True, comment='경쟁사 부채 비율'),
    sa.Column('share_percentage', sa.Numeric(precision=5, scale=2), nullable=True, comment='시장 점유율'),
    sa.Column('competitive_advantage', sa.Text(), nullable=True, comment='경쟁 우위 요소'),
    sa.Column('source', sa.String(length=255), nullable=True, comment='데이터의 출처'),
    sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='마지막 업데이트 시간'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_competitor_analysis_competitor', 'competitor_analysis', ['competitor_name'], unique=False)
    op.create_index('idx_competitor_analysis_market_year', 'competitor_analysis', ['market_name', sa.literal_column('year DESC')], unique=False)
    op.create_index('idx_competitor_analysis_revenue_desc', 'competitor_analysis', [sa.literal_column('revenue DESC')], unique=False)
    op.create_index('idx_competitor_analysis_share_desc', 'competitor_analysis', [sa.literal_column('share_percentage DESC')], unique=False)
    op.create_table('market_analysis',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='분석 데이터 고유 ID'),
    sa.Column('market_name', sa.String(length=255), nullable=False, comment='분석 대상 시장의 이름'),
    sa.Column('year', sa.Integer(), nullable=False, comment='데이터의 기준 연도'),
    sa.Column('total_revenue', sa.Numeric(precision=20, scale=2), nullable=True, comment='(A) 해당 연도 전체 시장 매출액'),
    sa.Column('cagr', sa.Numeric(precision=5, scale=2), nullable=True, comment='(A) 연평균 성장률 (%)'),
    sa.Column('growth_drivers', sa.Text(), nullable=True, comment='(A) 시장 성장 동인'),
    sa.Column('customer_group', sa.String(length=100), nullable=True, comment='(C) 주요 고객군'),
    sa.Column('avg_purchase_value', sa.Numeric(precision=15, scale=2), nullable=True, comment='(C) 평균 구매 금액'),
    sa.Column('nps', sa.Numeric(precision=5, scale=2), nullable=True, comment='(C) 순추천지수'),
    sa.Column('retention_rate', sa.Numeric(precision=5, scale=2), nullable=True, comment='(C) 고객 유지율'),
    sa.Column('source', sa.String(length=255), nullable=True, comment='데이터의 출처'),
    sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='마지막 업데이트 시간'),
    sa.Column('industry_trends', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='업종 트렌드 데이터'),
    sa.Column('market_conditions', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='시장 상황 데이터'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_market_analysis_conditions_gin', 'market_analysis', ['market_conditions'], unique=False, postgresql_using='gin')
    op.create_index('idx_market_analysis_market_year', 'market_analysis', ['market_name', sa.literal_column('year DESC')], unique=False)
    op.create_index('idx_market_analysis_revenue_desc', 'market_analysis', [sa.literal_column('total_revenue DESC')], unique=False)
    op.create_index('idx_market_analysis_trends_gin', 'market_analysis', ['industry_trends'], unique=False, postgresql_using='gin')
    op.create_index('idx_market_analysis_updated', 'market_analysis', [sa.literal_column('last_updated DESC')], unique=False)
    op.create_table('product_analysis',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='분석 데이터 고유 ID'),
    sa.Column('competitor_name', sa.String(length=255), nullable=False, comment='제품 소유 경쟁사'),
    sa.Column('product_name', sa.String(length=255), nullable=False, comment='제품명'),
    sa.Column('category', sa.String(length=100), nullable=True, comment='제품 카테고리'),
    sa.Column('price', sa.Numeric(precision=15, scale=2), nullable=True, comment='대표 가격'),
    sa.Column('price_policy_notes', sa.Text(), nullable=True, comment='가격 정책 설명'),
    sa.Column('distribution_channels', sa.Text(), nullable=True, comment='유통 채널'),
    sa.Column('tech_level', sa.String(length=100), nullable=True, comment='기술적 수준'),
    sa.Column('features', sa.Text(), nullable=True, comment='주요 특징'),
    sa.Column('last_updated', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='마지막 업데이트 시간'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_product_analysis_category', 'product_analysis', ['category'], unique=False)
    op.create_index('idx_product_analysis_competitor', 'product_analysis', ['competitor_name'], unique=False)
    op.create_index('idx_product_analysis_price_desc', 'product_analysis', [sa.literal_column('price DESC')], unique=False)
    op.create_index('idx_product_analysis_product', 'product_analysis', ['product_name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='서비스 내부에서 사용하는 고유 ID'),
    sa.Column('cognito_sub', sa.String(length=255), nullable=False, comment='Cognito 사용자 고유 식별자 (JWT sub)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='서비스 프로필 생성 일시'),
    sa.Column('total_token_usage', sa.Integer(), server_default='0', nullable=True, comment='누적 토큰 사용량'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('cognito_sub')
    )
    op.create_index('idx_users_cognito_sub', 'users', ['cognito_sub'], unique=False)
    op.create_index('idx_users_created_at', 'users', ['created_at'], unique=False)
    op.create_index('idx_users_token_usage', 'users', ['total_token_usage'], unique=False)
    op.create_table('business_plans',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='사업계획서 고유 ID'),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='업로더 사용자'),
    sa.Column('file_name', sa.String(length=255), nullable=False, comment='원본 파일명'),
    sa.Column('file_path', sa.String(length=500), nullable=False, comment='스토리지 내 저장 경로'),
    sa.Column('file_size', sa.BigInteger(), nullable=True, comment='바이트 단위 파일 크기'),
    sa.Column('mime_type', sa.String(length=100), nullable=True, comment='파일 MIME 타입'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='업로드 시각'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='수정 시각'),
    sa.Column('status', sa.String(length=20), server_default='pending', nullable=True, comment='분석 상태 (pending, processing, completed, failed)'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_business_plans_created_at', 'business_plans', ['created_at'], unique=False)
    op.create_index('idx_business_plans_filename_search', 'business_plans', ['file_name'], unique=False)
    op.create_index('idx_business_plans_status', 'business_plans', ['status'], unique=False)
    op.create_index('idx_business_plans_status_updated', 'business_plans', ['status', sa.literal_column('updated_at DESC')], unique=False)
    op.create_index('idx_business_plans_user_created', 'business_plans', ['user_id', sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_business_plans_user_id', 'business_plans', ['user_id'], unique=False)
    op.create_index('idx_business_plans_user_status', 'business_plans', ['user_id', 'status'], unique=False)
    op.create_table('analysis_jobs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='분석 작업 고유 ID'),
    sa.Column('plan_id', sa.Integer(), nullable=False, comment='분석 대상 사업계획서'),
    sa.Column('job_type', sa.String(length=50), nullable=False, comment='분석 유형 (basic, market, industry 등)'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='작업 상태 (pending, processing, completed, failed)'),
    sa.Column('token_usage', sa.Integer(), nullable=True, comment='이 작업에서 사용된 토큰 양'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='작업 생성(요청) 시각'),
    sa.Column('gemini_request_id', sa.String(length=100), nullable=True, comment='Gemini API 요청 ID'),
    sa.Column('processing_time_seconds', sa.Integer(), nullable=True, comment='처리 시간 (초)'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='오류 메시지'),
    sa.Column('retry_count', sa.Integer(), server_default='0', nullable=True, comment='재시도 횟수'),
    sa.Column('completed_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='완료 시간'),
    sa.Column('s3_bucket', sa.String(length=255), nullable=True, comment='S3 버킷명'),
    sa.Column('s3_key', sa.String(length=500), nullable=True, comment='S3 객체 키 (파일 경로)'),
    sa.Column('s3_region', sa.String(length=50), server_default='ap-northeast-2', nullable=True, comment='S3 리전'),
    sa.Column('upload_status', sa.Enum('pending', 'uploading', 'completed', 'failed', name='upload_status_enum'), server_default='pending', nullable=True, comment='S3 업로드 상태'),
    sa.ForeignKeyConstraint(['plan_id'], ['business_plans.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_analysis_jobs_completed_at', 'analysis_jobs', ['completed_at'], unique=False)
    op.create_index('idx_analysis_jobs_created_at', 'analysis_jobs', ['created_at'], unique=False)
    op.create_index('idx_analysis_jobs_gemini_request', 'analysis_jobs', ['gemini_request_id'], unique=False)
    op.create_index('idx_analysis_jobs_job_type', 'analysis_jobs', ['job_type'], unique=False)
    op.create_index('idx_analysis_jobs_plan_id', 'analysis_jobs', ['plan_id'], unique=False)
    op.create_index('idx_analysis_jobs_plan_status', 'analysis_jobs', ['plan_id', 'status'], unique=False)
    op.create_index('idx_analysis_jobs_plan_type_latest', 'analysis_jobs', ['plan_id', 'job_type', sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_analysis_jobs_s3_bucket_key', 'analysis_jobs', ['s3_bucket', 's3_key'], unique=False)
    op.create_index('idx_analysis_jobs_status', 'analysis_jobs', ['status'], unique=False)
    op.create_index('idx_analysis_jobs_status_created', 'analysis_jobs', ['status', sa.literal_column('created_at DESC')], unique=False)
    op.create_index('idx_analysis_jobs_type_completed', 'analysis_jobs', ['job_type', 'status', sa.literal_column('completed_at DESC')], unique=False)
    op.create_index('idx_analysis_jobs_type_status', 'analysis_jobs', ['job_type', 'status'], unique=False)
    op.create_index('idx_analysis_jobs_upload_status', 'analysis_jobs', ['upload_status'], unique=False)
    op.create_table('analysis_results',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='결과 항목 고유 ID'),
    sa.Column('analysis_job_id', sa.Integer(), nullable=False, comment='이 결과를 생성한 분석 작업'),
    sa.Column('evaluation_type', sa.String(length=50), nullable=False, comment='평가 유형 (overall, market, industry, feedback 등)'),
    sa.Column('score', sa.Numeric(precision=5, scale=2), nullable=True, comment='점수 (0.00–100.00)'),
    sa.Column('summary', sa.Text(), nullable=True, comment='요약'),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='분석 유형별 특화 데이터 저장소 (모든 상세 평가 데이터 통합)'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True, comment='생성 일시'),
    sa.ForeignKeyConstraint(['analysis_job_id'], ['analysis_jobs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_analysis_results_created_at', 'analysis_results', ['created_at'], unique=False)
    op.create_index('idx_analysis_results_details_gin', 'analysis_results', ['details'], unique=False, postgresql_using='gin')
    op.create_index('idx_analysis_results_job_id', 'analysis_results', ['analysis_job_id'], unique=False)
    op.create_index('idx_analysis_results_job_score', 'analysis_results', ['analysis_job_id', sa.literal_column('score DESC')], unique=False)
    op.create_index('idx_analysis_results_job_type', 'analysis_results', ['analysis_job_id', 'evaluation_type'], unique=False)
    op.create_index('idx_analysis_results_score', 'analysis_results', ['score'], unique=False)
    op.create_index('idx_analysis_results_type', 'analysis_results', ['evaluation_type'], unique=False)
    op.create_index('idx_analysis_results_type_score', 'analysis_results', ['evaluation_type', sa.literal_column('score DESC')], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_analysis_results_type_score', table_name='analysis_results')
    op.drop_index('idx_analysis_results_type', table_name='analysis_results')
    op.drop_index('idx_analysis_results_score', table_name='analysis_results')
    op.drop_index('idx_analysis_results_job_type', table_name='analysis_results')
    op.drop_index('idx_analysis_results_job_score', table_name='analysis_results')
    op.drop_index('idx_analysis_results_job_id', table_name='analysis_results')
    op.drop_index('idx_analysis_results_details_gin', table_name='analysis_results', postgresql_using='gin')
    op.drop_index('idx_analysis_results_created_at', table_name='analysis_results')
    op.drop_table('analysis_results')
    op.drop_index('idx_analysis_jobs_upload_status', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_type_status', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_type_completed', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_status_created', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_status', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_s3_bucket_key', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_plan_type_latest', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_plan_status', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_plan_id', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_job_type', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_gemini_request', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_created_at', table_name='analysis_jobs')
    op.drop_index('idx_analysis_jobs_completed_at', table_name='analysis_jobs')
    op.drop_table('analysis_jobs')
    op.drop_index('idx_business_plans_user_status', table_name='business_plans')
    op.drop_index('idx_business_plans_user_id', table_name='business_plans')
    op.drop_index('idx_business_plans_user_created', table_name='business_plans')
    op.drop_index('idx_business_plans_status_updated', table_name='business_plans')
    op.drop_index('idx_business_plans_status', table_name='business_plans')
    op.drop_index('idx_business_plans_filename_search', table_name='business_plans')
    op.drop_index('idx_business_plans_created_at', table_name='business_plans')
    op.drop_table('business_plans')
    op.drop_index('idx_users_token_usage', table_name='users')
    op.drop_index('idx_users_created_at', table_name='users')
    op.drop_index('idx_users_cognito_sub', table_name='users')
    op.drop_table('users')
    op.drop_index('idx_product_analysis_product', table_name='product_analysis')
    op.drop_index('idx_product_analysis_price_desc', table_name='product_analysis')
    op.drop_index('idx_product_analysis_competitor', table_name='product_analysis')
    op.drop_index('idx_product_analysis_category', table_name='product_analysis')
    op.drop_table('product_analysis')
    op.drop_index('idx_market_analysis_updated', table_name='market_analysis')
    op.drop_index('idx_market_analysis_trends_gin', table_name='market_analysis', postgresql_using='gin')
    op.drop_index('idx_market_analysis_revenue_desc', table_name='market_analysis')
    op.drop_index('idx_market_analysis_market_year', table_name='market_analysis')
    op.drop_index('idx_market_analysis_conditions_gin', table_name='market_analysis', postgresql_using='gin')
    op.drop_table('market_analysis')
    op.drop_index('idx_competitor_analysis_share_desc', table_name='competitor_analysis')
    op.drop_index('idx_competitor_analysis_revenue_desc', table_name='competitor_analysis')
    op.drop_index('idx_competitor_analysis_market_year', table_name='competitor_analysis')
    op.drop_index('idx_competitor_analysis_competitor', table_name='competitor_analysis')
    op.drop_table('competitor_analysis')
    # ### end Alembic commands ###